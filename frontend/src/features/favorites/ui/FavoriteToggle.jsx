import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useFavoritesStore } from '../model';
import { useAuthStore } from '../../auth/model';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –±—É–∫–µ—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Object} props.bouquet - –ë—É–∫–µ—Ç
 * @param {string} [props.className] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS –∫–ª–∞—Å—Å—ã
 * @param {Function} [props.onBeforeAction] - –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
 * @param {Function} [props.onSuccess] - –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
 * @param {Function} [props.onError] - –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @param {Function} [props.onUnauthorized] - –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
 */
const FavoriteToggle = ({
  bouquet,
  className = '',
  onBeforeAction,
  onSuccess,
  onError,
  onUnauthorized
}) => {
  const navigate = useNavigate();
  const { isAuth } = useAuthStore();
  const { isFavorite, addToFavorites, removeFromFavorites } = useFavoritesStore();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±—É–∫–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
  const isInFavorites = bouquet ? isFavorite(bouquet.id) : false;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
  const handleToggleFavorite = async (e) => {
    e.preventDefault();
    e.stopPropagation();

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!isAuth) {
      if (onUnauthorized) {
        onUnauthorized();
      } else {
        navigate('/login', { state: { from: window.location.pathname } });
      }
      return;
    }

    if (onBeforeAction) {
      onBeforeAction();
    }

    try {
      if (isInFavorites) {
        await removeFromFavorites(bouquet.id);
      } else {
        await addToFavorites(bouquet);
      }

      if (onSuccess) {
        onSuccess(isInFavorites ? 'removed' : 'added');
      }
    } catch (error) {
      console.error('Error toggling favorite:', error);
      if (onError) {
        onError(error);
      }
    }
  };

  if (!bouquet) {
    return null;
  }

  return (
    <button
      className={`w-10 h-10 flex items-center justify-center bg-white rounded-full shadow-md transition-all hover:shadow-lg hover:scale-110 ${className}`}
      onClick={handleToggleFavorite}
      aria-label={isInFavorites ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
      title={isInFavorites ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
    >
      {isInFavorites ? '‚ù§Ô∏è' : 'ü§ç'}
    </button>
  );
};

export default FavoriteToggle;
