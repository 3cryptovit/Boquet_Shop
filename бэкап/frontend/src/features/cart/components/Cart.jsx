import React, { useState, useEffect } from "react";
import { useNavigate, Link } from "react-router-dom";
import formatImageUrl from "../utils/imageUrl";
import { fetchWithAuth } from '../utils/fetchWithAuth';
import '../index.css';

function Cart() {
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [orderPlaced, setOrderPlaced] = useState(false);
  const navigate = useNavigate();
  const [token, setToken] = useState(null);
  const [userId, setUserId] = useState(null);
  const [deliveryInfo, setDeliveryInfo] = useState({
    address: '',
    phone: '',
    comment: '',
    paymentMethod: 'card'
  });
  const [orderStep, setOrderStep] = useState(1); // 1 - –∫–æ—Ä–∑–∏–Ω–∞, 2 - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ localStorage
    const userToken = localStorage.getItem("token");
    const userIdFromStorage = localStorage.getItem("userId");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –∏ userId
    if (!userToken || !userIdFromStorage) {
      setError("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è");
      setLoading(false);
      return;
    }

    setToken(userToken);
    setUserId(userIdFromStorage);

    console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userIdFromStorage);

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
    fetchCart();
  }, []);

  const fetchCart = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/cart', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã');
      }

      const data = await response.json();
      setCartItems(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const updateQuantity = async (itemId, quantity) => {
    try {
      const response = await fetch(`http://localhost:5000/api/cart/${itemId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ quantity })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
      }

      fetchCart(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    } catch (err) {
      setError(err.message);
    }
  };

  const removeItem = async (itemId) => {
    try {
      const response = await fetch(`http://localhost:5000/api/cart/${itemId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
      }

      fetchCart(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    } catch (err) {
      setError(err.message);
    }
  };

  const handleCheckout = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          items: cartItems.map(item => ({
            cartItemId: item.id,
            quantity: item.quantity
          })),
          ...deliveryInfo
        })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
      }

      setOrderPlaced(true);
      setTimeout(() => {
        navigate('/');
      }, 3000);
    } catch (err) {
      setError(err.message);
    }
  };

  if (loading) {
    return <div style={styles.container}><p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</p></div>;
  }

  if (error && !cartItems.length) {
    return (
      <div style={styles.container}>
        <h1 style={styles.title}>üõí –ö–æ—Ä–∑–∏–Ω–∞</h1>
        <p style={styles.error}>{error}</p>
        <button
          style={styles.loginButton}
          onClick={() => navigate('/login')}
        >
          –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
        </button>
      </div>
    );
  }

  if (orderPlaced) {
    return (
      <div style={styles.container}>
        <h1 style={styles.title}>üéâ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</h1>
        <p style={styles.successMessage}>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —É–∂–µ –≥–æ—Ç–æ–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑.</p>
        <p>–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...</p>
      </div>
    );
  }

  // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const total = cartItems.reduce((sum, item) => {
    const price = item.customBouquet ? item.customBouquet.price : item.bouquet.price;
    return sum + price * item.quantity;
  }, 0);

  return (
    <div style={styles.container}>
      <h1 style={styles.title}>üõí –ö–æ—Ä–∑–∏–Ω–∞</h1>

      {cartItems.length === 0 ? (
        <div style={styles.emptyCart}>
          <p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
          <button
            style={styles.catalogButton}
            onClick={() => navigate('/catalog')}
          >
            –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
          </button>
        </div>
      ) : (
        <div className="card fade-in">
          {orderStep === 1 ? (
            <div style={{
              display: 'flex',
              flexDirection: 'column',
              gap: '20px'
            }}>
              {cartItems.map((item) => (
                <div key={item.id} className="cart-item">
                  <img
                    src={formatImageUrl(
                      item.customBouquet ? item.customBouquet.image_url : item.bouquet.imageUrl,
                      '/assets/default-bouquet.jpg'
                    )}
                    alt={item.customBouquet ? item.customBouquet.name : item.bouquet.name}
                    className="cart-item-image"
                  />
                  <div className="cart-item-details">
                    <h3>{item.customBouquet ? item.customBouquet.name : item.bouquet.name}</h3>
                    <p>{item.customBouquet ? item.customBouquet.description : item.bouquet.description}</p>
                    <p className="price">
                      {(item.customBouquet ? item.customBouquet.price : item.bouquet.price) * item.quantity} ‚ÇΩ
                    </p>
                    <div className="quantity-controls">
                      <button
                        onClick={() => updateQuantity(item.id, item.quantity - 1)}
                        disabled={item.quantity <= 1}
                      >
                        -
                      </button>
                      <span>{item.quantity}</span>
                      <button
                        onClick={() => updateQuantity(item.id, item.quantity + 1)}
                      >
                        +
                      </button>
                    </div>
                    <button
                      onClick={() => removeItem(item.id)}
                      className="remove-button"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))}

              <div style={styles.cartSummary}>
                <h3>–ò—Ç–æ–≥–æ: {total} ‚ÇΩ</h3>
                <button
                  onClick={() => setOrderStep(2)}
                  className="primary-button"
                >
                  –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
              </div>
            </div>
          ) : (
            <div style={styles.orderForm}>
              <h3>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
              <input
                type="text"
                placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                value={deliveryInfo.address}
                onChange={(e) => setDeliveryInfo({ ...deliveryInfo, address: e.target.value })}
                style={styles.input}
              />
              <input
                type="tel"
                placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
                value={deliveryInfo.phone}
                onChange={(e) => setDeliveryInfo({ ...deliveryInfo, phone: e.target.value })}
                style={styles.input}
              />
              <textarea
                placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"
                value={deliveryInfo.comment}
                onChange={(e) => setDeliveryInfo({ ...deliveryInfo, comment: e.target.value })}
                style={styles.textarea}
              />
              <div style={styles.paymentMethods}>
                <label>
                  <input
                    type="radio"
                    value="card"
                    checked={deliveryInfo.paymentMethod === 'card'}
                    onChange={(e) => setDeliveryInfo({ ...deliveryInfo, paymentMethod: e.target.value })}
                  />
                  –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
                </label>
                <label>
                  <input
                    type="radio"
                    value="cash"
                    checked={deliveryInfo.paymentMethod === 'cash'}
                    onChange={(e) => setDeliveryInfo({ ...deliveryInfo, paymentMethod: e.target.value })}
                  />
                  –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏
                </label>
              </div>
              <div style={styles.orderButtons}>
                <button
                  onClick={() => setOrderStep(1)}
                  className="secondary-button"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={handleCheckout}
                  className="primary-button"
                  disabled={!deliveryInfo.address || !deliveryInfo.phone}
                >
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

const styles = {
  container: {
    maxWidth: '800px',
    margin: '0 auto',
    padding: '40px 20px'
  },
  title: {
    fontSize: '28px',
    marginBottom: '20px'
  },
  error: {
    color: '#d32f2f',
    marginBottom: '20px'
  },
  loginButton: {
    background: '#ff4081',
    color: 'white',
    border: 'none',
    padding: '10px 20px',
    borderRadius: '5px',
    cursor: 'pointer'
  },
  successMessage: {
    color: '#43a047',
    fontSize: '18px',
    marginBottom: '20px'
  },
  quantityButton: {
    border: '1px solid #ddd',
    background: 'white',
    width: '30px',
    height: '30px',
    borderRadius: '5px',
    cursor: 'pointer',
    margin: '0 5px'
  },
  quantityValue: {
    padding: '0 10px'
  },
  removeButton: {
    background: 'none',
    border: 'none',
    color: '#999',
    cursor: 'pointer',
    fontSize: '18px',
    marginLeft: 'auto'
  },
  emptyCart: {
    textAlign: 'center',
    padding: '40px'
  },
  catalogButton: {
    background: 'var(--primary-color)',
    color: 'white',
    border: 'none',
    padding: '10px 20px',
    borderRadius: '5px',
    cursor: 'pointer'
  },
  cartSummary: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '20px'
  },
  orderForm: {
    padding: '20px'
  },
  input: {
    width: '100%',
    padding: '10px',
    borderRadius: '5px',
    border: '1px solid #ddd',
    marginBottom: '15px'
  },
  textarea: {
    width: '100%',
    padding: '10px',
    borderRadius: '5px',
    border: '1px solid #ddd',
    minHeight: '100px',
    marginBottom: '15px'
  },
  paymentMethods: {
    marginBottom: '15px'
  },
  orderButtons: {
    display: 'flex',
    justifyContent: 'space-between',
    marginTop: '20px'
  }
};

export default Cart;
