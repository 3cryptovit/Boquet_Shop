generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  username      String         @unique
  role          Role           @default(user)
  createdAt     DateTime       @default(now()) @map("created_at")
  bouquets      Bouquet[]
  orders        Order[]
  favorites     Favorite[]
  refreshTokens RefreshToken[]
  cart          Cart[]
}

model Bouquet {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  imageUrl    String?
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  price       Float         @default(0)
  isPublic    Boolean       @default(true)
  orderItems  OrderItem[]
  favorites   Favorite[]
  cart        Cart[]
  cells       BouquetCell[] // üí° –ì–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ ‚Äì –≤—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞–∫–µ—Ç–∞ —Ç—É—Ç
}

model BouquetCell {
  id        Int   @id @default(autoincrement())
  bouquetId Int
  flowerId  Int? // üí° null ‚Äî –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
  layer     Int
  positionX Int
  positionY Int
  angle     Float
  zIndex    Int
  position  Int // –ü–æ—Ä—è–¥–æ–∫ –∫–∞–∫ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ (cell.id)

  bouquet Bouquet @relation(fields: [bouquetId], references: [id])
  flower  Flower? @relation(fields: [flowerId], references: [id])
}

model Flower {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  price        Float
  imageUrl     String?
  bouquetCells BouquetCell[]
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  total     Float
  status    String      @default("pending")
  items     OrderItem[]
}

model OrderItem {
  id               Int             @id @default(autoincrement())
  orderId          Int
  bouquetId        Int?
  customBouquetId  Int?

  quantity         Int

  order            Order           @relation(fields: [orderId], references: [id])
  bouquet          Bouquet?        @relation(fields: [bouquetId], references: [id])
  customBouquet    CustomBouquet? @relation(fields: [customBouquetId], references: [id])
}


model Favorite {
  id        Int     @id @default(autoincrement())
  userId    Int
  bouquetId Int
  user      User    @relation(fields: [userId], references: [id])
  bouquet   Bouquet @relation(fields: [bouquetId], references: [id])

  @@unique([userId, bouquetId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}
model CustomBouquet {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String
  flowers     String // üí° JSON-—Å—Ç—Ä–æ–∫–∞ —Å –º–∞–∫–µ—Ç–æ–º (layer/x/y/angle –∏ —Ç.–¥.)
  cart        Cart?

  orderItems  OrderItem[] 
}

model RevokedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Cart {
  id              Int            @id @default(autoincrement())
  userId          Int
  bouquetId       Int?
  customBouquetId Int?           @unique
  quantity        Int            @default(1)
  user            User           @relation(fields: [userId], references: [id])
  bouquet         Bouquet?       @relation(fields: [bouquetId], references: [id])
  customBouquet   CustomBouquet? @relation(fields: [customBouquetId], references: [id])
  createdAt       DateTime       @default(now())

  @@unique([userId, bouquetId])
}
