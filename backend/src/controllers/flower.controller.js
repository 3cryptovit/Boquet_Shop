// backend/controllers/flower.controller.js

const prisma = require('../../prisma/client');

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ (–¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)
exports.getAllFlowers = async (req, res) => {
  try {
    const flowers = await prisma.flower.findMany({
      orderBy: { id: 'asc' } // –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ name
    });

    res.status(200).json(flowers);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤:', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–≤–µ—Ç—ã' });
  }
};

// üõ†Ô∏è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ü–≤–µ—Ç
exports.createFlower = async (req, res) => {
  try {
    const { name, price, imageUrl } = req.body;

    if (!name || !price) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const flower = await prisma.flower.create({
      data: { name, price: Number(price), imageUrl }
    });

    res.status(201).json(flower);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üßº (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) –£–¥–∞–ª–∏—Ç—å —Ü–≤–µ—Ç –ø–æ ID
exports.deleteFlower = async (req, res) => {
  try {
    const { id } = req.params;

    await prisma.flower.delete({
      where: { id: Number(id) }
    });

    res.json({ message: '–¶–≤–µ—Ç–æ–∫ —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∫–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
